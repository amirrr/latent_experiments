name: Python package

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release version"
        default: "0.0.1"
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: pytest

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up GitHub CLI
        run: |
          sudo apt-get install -y gh
      - name: Get the latest release version and create a new release
        run: |
          LATEST_TAG=$(gh release view --json tagName -q '.tagName' || echo "none")
          if [ "$LATEST_TAG" == "none" ]; then
            echo "First release - setting default version number"
            NEW_VERSION="0.0.1"
          else
            echo "Latest version tag: $LATEST_TAG"
            IFS='.' read -ra VERSION <<< "$LATEST_TAG"
            MAJOR=${VERSION[0]}
            MINOR=${VERSION[1]}
            PATCH=${VERSION[2]}
            NEW_PATCH=$(($PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          fi
          gh release create $NEW_VERSION --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
