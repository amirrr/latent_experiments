# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release version"
        default: "0.0.1"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Get the latest release version
      id: get_version
      run: |
        LATEST_TAG=$(gh release view --json tagName -q '.tagName' || echo "none")
        if [ "$LATEST_TAG" = "none" ]; then
          echo "First release - setting default version number"
          echo "NEW_VERSION=0.0.1" >> $GITHUB_ENV
        else
          echo "Latest version tag: $LATEST_TAG"
          IFS='.' read -ra VERSION <<< "$LATEST_TAG"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}
          NEW_PATCH=$(($PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Create a new release
      run: |
        gh release create --generate-notes ${{ env.NEW_VERSION }}
      env:
        GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}